import tkinter as tk
from tkinter import messagebox
import math

# Create a GUI class
class CalculatorApp:
    def __init__(self, master):
        self.master = master
        master.title("Calculator")

        # Create entry for user input
        self.entry = tk.Entry(master, font=('Arial', 20))
        self.entry.grid(row=0, column=0, columnspan=6, padx=10, pady=10, ipady=20)

        # Create buttons for arithmetic operations (Section 1)
        self.buttons_section_1 = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),
            ('0', 4, 0), ('.', 4, 1), ('=', 4, 2), ('+', 4, 3)
        ]

        self.advanced_buttons = []  # Initialize advanced buttons list

        self.create_buttons(self.buttons_section_1)

        # Create buttons for advanced functions (Section 2)
        self.buttons_section_2 = [
            ('!', 1, 4), ('π', 1, 5), ('%', 2, 4), ('(', 2, 5),
            (')', 3, 4), ('x²', 3, 5), ('√', 4, 4), ('^', 4, 5),
            ('sin', 5, 0), ('cos', 5, 1), ('tan', 5, 2), ('sin⁻¹', 5, 3),
            ('cos⁻¹', 6, 0), ('tan⁻¹', 6, 1), ('e', 6, 2), ('log2', 6, 3),
            ('ln', 7, 0), ('log', 7, 1)
        ]

        self.create_buttons(self.buttons_section_2)

        # Create clear button (Section 3)
        clear_button = tk.Button(master, text='C', font=('Arial', 18), bg='red', fg='white', command=self.clear_entry)
        clear_button.grid(row=8, column=0, columnspan=6, padx=5, pady=5, sticky="ew", ipady=15)

        # Bind the zoom button event
        master.bind("<Control-plus>", self.toggle_advanced_buttons)

    # Function to handle button clicks
    def on_button_click(self, value):
        current_value = self.entry.get()
        if value == '=':
            try:
                result = eval(current_value)
                self.entry.delete(0, tk.END)
                self.entry.insert(tk.END, str(result))
            except Exception as e:
                messagebox.showerror("Error", f"Invalid Input: {e}")
        elif value == '!':  # Factorial button
            try:
                num = int(current_value)
                result = math.factorial(num)
                self.entry.delete(0, tk.END)
                self.entry.insert(tk.END, str(result))
            except ValueError:
                messagebox.showerror("Error", "Invalid Input! Please enter an integer.")
            except Exception as e:
                messagebox.showerror("Error", f"Error calculating factorial: {e}")
        elif value == 'π':  # Pi button
            self.entry.insert(tk.END, math.pi)
        elif value == '%':  # Percentage button
            self.entry.insert(tk.END, '/100')
        elif value == 'sin':  # Sine button
            self.entry.insert(tk.END, 'math.sin(')
        elif value == 'cos':  # Cosine button
            self.entry.insert(tk.END, 'math.cos(')
        elif value == 'tan':  # Tangent button
            self.entry.insert(tk.END, 'math.tan(')
        elif value == 'sin⁻¹':  # Arcsine button
            self.entry.insert(tk.END, 'math.asin(')
        elif value == 'cos⁻¹':  # Arccosine button
            self.entry.insert(tk.END, 'math.acos(')
        elif value == 'tan⁻¹':  # Arctangent button
            self.entry.insert(tk.END, 'math.atan(')
        elif value == 'e':  # Exponent button
            self.entry.insert(tk.END, math.e)
        elif value == 'x²':  # Square button
            self.entry.insert(tk.END, '**2')
        elif value == '√':  # Square root button
            self.entry.insert(tk.END, 'math.sqrt(')
        elif value == '^':  # Power button
            self.entry.insert(tk.END, '**')
        elif value == 'log2':  # Log base 2 button
            self.entry.insert(tk.END, 'math.log2(')
        elif value == 'ln':  # Natural logarithm button
            self.entry.insert(tk.END, 'math.log(')
        elif value == 'log':  # Logarithm button
            self.entry.insert(tk.END, 'math.log10(')
        elif value == '(':  # Left parenthesis button
            self.entry.insert(tk.END, '(')
        elif value == ')':  # Right parenthesis button
            self.entry.insert(tk.END, ')')
        else:
            self.entry.insert(tk.END, value)

    # Function to clear the entry
    def clear_entry(self):
        self.entry.delete(0, tk.END)

    # Function to toggle the visibility of advanced buttons
    def toggle_advanced_buttons(self, event):
        if self.advanced_buttons:
            for button in self.advanced_buttons:
                if button.grid_info():
                    button.grid_forget()
                else:
                    button.grid(row=button.grid_info()["row"], column=button.grid_info()["column"], padx=5, pady=5, ipadx=20, ipady=15)
        else:
            self.create_buttons(self.buttons_section_2)

    # Function to create buttons based on button data
    def create_buttons(self, button_data):
        for (text, row, col) in button_data:
            button = tk.Button(self.master, text=text, font=('Arial', 18), bg='lightblue', fg='black', command=lambda t=text: self.on_button_click(t))
            button.grid(row=row, column=col, padx=5, pady=5, ipadx=20, ipady=15)
            self.advanced_buttons.append(button)

# Create the main window and start the application
root = tk.Tk()
app = CalculatorApp(root)
root.mainloop()
