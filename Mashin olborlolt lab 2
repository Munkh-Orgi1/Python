1)
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Sample data
data = {
    'Species': ['Setosa', 'Versicolor', 'Virginica'],
    'SepalLength': [5.0, 5.9, 6.5],
    'SepalWidth': [3.4, 2.8, 3.0],
    'PetalLength': [1.4, 4.2, 5.5],
    'PetalWidth': [0.2, 1.3, 2.3]
}

# Creating a DataFrame
df = pd.DataFrame(data)

# Melting the DataFrame to long format for seaborn
df_melt = pd.melt(df, id_vars='Species', var_name='Attribute', value_name='Measurement')

# Plotting with seaborn
plt.figure(figsize=(14, 10))
sns.barplot(data=df_melt, x='Attribute', y='Measurement', hue='Species')

# Adding titles and labels
plt.title('Attributes of Flowers by Species')
plt.xlabel('Attributes')
plt.ylabel('Measurements')
plt.legend(title='Species')

# Display the plot
plt.show()
2)
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Sample data representing the flower dataset
data = {
    'Species': ['Setosa', 'Setosa', 'Setosa', 'Versicolor', 'Versicolor', 'Versicolor', 
                'Virginica', 'Virginica', 'Virginica'],
    'SepalLength': [5.1, 4.9, 5.4, 6.1, 5.7, 5.9, 6.5, 6.3, 6.8],
    'SepalWidth': [3.5, 3.0, 3.4, 2.8, 3.0, 2.9, 3.0, 2.7, 3.2],
    'PetalLength': [1.4, 1.3, 1.5, 4.0, 4.2, 4.5, 5.5, 5.1, 5.9],
    'PetalWidth': [0.2, 0.2, 0.4, 1.3, 1.2, 1.5, 2.2, 1.8, 2.3]
}

# Creating a DataFrame from the data
df = pd.DataFrame(data)

# Creating an expanded scatter plot using seaborn's pairplot function
sns.pairplot(df, hue='Species', markers=["o", "s", "D"], palette='Set2', plot_kws={'alpha': 0.7, 's': 80})

# Adding a title to the plot
plt.suptitle('Expanded Scatter Plot of Flower Attributes by Species', y=1.02, fontsize=16)

# Displaying the plot
plt.show()
3)
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Sample data representing the flower dataset
data = {
    'Species': ['Setosa', 'Setosa', 'Setosa', 'Versicolor', 'Versicolor', 'Versicolor', 
                'Virginica', 'Virginica', 'Virginica'],
    'SepalLength': [5.1, 4.9, 5.4, 6.1, 5.7, 5.9, 6.5, 6.3, 6.8],
    'SepalWidth': [3.5, 3.0, 3.4, 2.8, 3.0, 2.9, 3.0, 2.7, 3.2],
    'PetalLength': [1.4, 1.3, 1.5, 4.0, 4.2, 4.5, 5.5, 5.1, 5.9],
    'PetalWidth': [0.2, 0.2, 0.4, 1.3, 1.2, 1.5, 2.2, 1.8, 2.3]
}

# Creating a DataFrame from the data
df = pd.DataFrame(data)

# Dropping the 'Species' column for the correlation matrix
df_numeric = df.drop('Species', axis=1)

# Generating the correlation matrix
correlation_matrix = df_numeric.corr()

# Plotting the heatmap of the correlation matrix using seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', cbar=True, square=True, fmt='.2f')

# Adding titles and labels
plt.title('Heatmap of Correlation Matrix', fontsize=16)
plt.show()
4)
import math

# Function to calculate Euclidean distance between two vectors
def euclidean_distance(x, y):
    # Calculate the sum of squared differences
    distance = math.sqrt(sum((xi - yi) ** 2 for xi, yi in zip(x, y)))
    return distance

# Given vectors
x = [0, 3, 4, 5]
y = [7, 6, 3, -1]

# Calculating the Euclidean distance between x and y
distance = euclidean_distance(x, y)

# Display the result
print(f"The Euclidean distance between x and y is: {distance}")
5)
# Function to calculate Manhattan distance between two vectors
def manhattan_distance(x, y):
    # Calculate the sum of absolute differences
    distance = sum(abs(xi - yi) for xi, yi in zip(x, y))
    return distance

# Given vectors
x = [10, 20, 10]
y = [10, 20, 20]

# Calculating the Manhattan distance between x and y
distance = manhattan_distance(x, y)

# Display the result
print(f"The Manhattan distance between x and y is: {distance}")
6)
# Function to calculate Minkowski distance between two vectors
def minkowski_distance(x, y, r):
    # Calculate the Minkowski distance with the given r
    distance = sum(abs(xi - yi) ** r for xi, yi in zip(x, y)) ** (1 / r)
    return distance

# Given vectors
x = [0, 3, 4, 5]
y = [7, 6, 3, -1]

# Parameter r = 3
r = 3

# Calculating the Minkowski distance between x and y
distance = minkowski_distance(x, y, r)

# Display the result
print(f"The Minkowski distance between x and y with r = {r} is: {distance}")
7)
import math

# Function to calculate cosine similarity between two vectors
def cosine_similarity(x, y):
    # Calculate the dot product of x and y
    dot_product = sum(xi * yi for xi, yi in zip(x, y))
    
    # Calculate the magnitude of x
    magnitude_x = math.sqrt(sum(xi ** 2 for xi in x))
    
    # Calculate the magnitude of y
    magnitude_y = math.sqrt(sum(yi ** 2 for yi in y))
    
    # Calculate the cosine similarity
    if magnitude_x == 0 or magnitude_y == 0:
        return 0  # To handle division by zero
    similarity = dot_product / (magnitude_x * magnitude_y)
    
    return similarity

# Given vectors
x = [3, 45, 7, 2]
y = [2, 54, 13, 15]

# Calculating the cosine similarity between x and y
similarity = cosine_similarity(x, y)

# Display the result
print(f"The cosine similarity between x and y is: {similarity}")
8)
# Function to calculate Jaccard similarity between two lists
def jaccard_similarity(x, y):
    # Convert lists to sets
    set_x = set(x)
    set_y = set(y)
    
    # Calculate the intersection and union of the sets
    intersection = set_x.intersection(set_y)
    union = set_x.union(set_y)
    
    # Calculate Jaccard similarity
    similarity = len(intersection) / len(union)
    
    return similarity

# Given lists
x = [0, 1, 2, 5, 6]
y = [0, 2, 3, 5, 7, 9]

# Calculating the Jaccard similarity between x and y
similarity = jaccard_similarity(x, y)

# Display the result
print(f"The Jaccard similarity between x and y is: {similarity}")
