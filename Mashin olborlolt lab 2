# Step 1: Print the first 5 records of the data
import pandas as pd
from sklearn.preprocessing import OrdinalEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Load the data
car_data = pd.read_csv("C:/Users/mkom8/Downloads/car.csv")
print("First 5 records of the data:")
print(car_data.head())

# Step 2: Check for duplicate lines and remove them if there are any
duplicates = car_data.duplicated().sum()
print(f"Number of duplicate rows: {duplicates}")
if duplicates > 0:
    car_data = car_data.drop_duplicates()

# Step 3: Check if there is a missing value
missing_values = car_data.isnull().sum()
print(f"Missing values in each column:\n{missing_values}")

# Step 4: Extract predictor (X) and target class (Y) features from the dataset
X = car_data.drop('class', axis=1)
Y = car_data['class']

# Step 5: Encode the categorical attributes of the predictor (X) set using OrdinalEncoder
ordinal_encoder = OrdinalEncoder()
X_encoded = ordinal_encoder.fit_transform(X)

# Convert to DataFrame for readability
X_encoded_df = pd.DataFrame(X_encoded, columns=X.columns)
print("First 5 records of the encoded predictor set:")
print(X_encoded_df.head())

# Step 6: Divide the data into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X_encoded_df, Y, test_size=0.33, random_state=42)

# Print the shape of X_train and X_test
print(f"X_train shape: {X_train.shape}")
print(f"X_test shape: {X_test.shape}")

# Step 7: Create and train the Decision Tree classifier using the Gini index with pruning
clf_pruned = DecisionTreeClassifier(random_state=42, ccp_alpha=0.01)
clf_pruned.fit(X_train, y_train)

# Step 8: Create a decision tree diagram
plt.figure(figsize=(20,10))
plot_tree(clf_pruned, filled=True, feature_names=X.columns, class_names=clf_pruned.classes_, rounded=True)
plt.show()

# Step 9: Apply the learned model to the test data
y_pred = clf_pruned.predict(X_test)

# Step 10: Find the accuracy of the classifier on the test data
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the pruned decision tree classifier on the test data: {accuracy * 100:.2f}%")
